{"version":3,"sources":["initialMD.js","App.js","serviceWorker.js","index.js"],"names":["initialMD","mdToClearnHtml","mdText","DOMpurify","sanitize","marked","breaks","FORBID_ATTR","initialState","input","output","store","createStore","state","action","type","htmlText","Editor","props","handleChange","bind","event","this","updatePreview","target","value","className","name","id","cols","rows","placeholder","onChange","React","Component","MarkDownPreview","dangerouslySetInnerHTML","__html","somehtml","Container","connect","dispatch","md","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SACeA,EADG,u6BCUZC,G,MAAiB,SAACC,GACtB,OAAOC,IAAUC,SAASC,IAAOH,EAAQ,CAAEI,QAAQ,IAAS,CAC1DC,YAAa,CAAC,UAgBZC,EAAe,CACnBC,MAAOT,EACPU,OAAQT,EAAeD,IAenBW,EAAQC,aAZM,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCACpD,OAAQA,EAAOC,MACb,IAjBkB,gBAkBhB,MAAO,CACLN,MAAOK,EAAOZ,OACdQ,OAAQI,EAAOE,UAEnB,QACE,OAAOH,MAcPI,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,yDAMNC,GACXC,KAAKJ,MAAMK,cAAcF,EAAMG,OAAOC,S,+BAItC,OACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,qBAAd,kBAEA,8BACEA,UAAU,mBACVC,KAAK,GACLC,GAAG,SACHC,KAAK,KACLC,KAAK,KACLC,YAAY,uCACZN,MAAOH,KAAKJ,MAAMhB,OAClB8B,SAAUV,KAAKH,oB,GAxBJc,IAAMC,WA+BrBC,EAAkB,SAACjB,GACvB,OACE,yBAAKQ,UAAU,cACb,wBAAIA,UAAU,sBAAd,UACA,6BACEA,UAAU,mBACVE,GAAG,UACHQ,wBAAyB,CAAEC,OAAQnB,EAAMoB,cAgBjD,IAYMC,EAAYC,aAZM,SAAC3B,GACvB,MAAO,CAAEJ,MAAOI,EAAMJ,MAAOC,OAAQG,EAAMH,WAGnB,SAAC+B,GACzB,MAAO,CACLlB,cAAe,SAACmB,GA/FM,IAACxC,EAgGrBuC,EA/FG,CACL1B,KAJkB,gBAKlBb,OAHuBA,EAgGMwC,EA5F7B1B,SAAUf,EAAeC,SAiGXsC,EAtBlB,SAAqBtB,GACnB,OACE,yBAAKQ,UAAU,WACb,kBAAC,EAAD,CAAQxB,OAAQgB,EAAMT,MAAOc,cAAeL,EAAMK,gBAClD,kBAAC,EAAD,CAAiBe,SAAUpB,EAAMR,aA8BxBiC,E,uKARX,OACE,kBAAC,IAAD,CAAUhC,MAAOA,GACf,kBAAC4B,EAAD,W,GAJUN,IAAMC,WC/GJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0b6ab058.chunk.js","sourcesContent":["const initialMD = \"# Header level 1  \\n## Level 2  \\n###### Level  6  \\n*This text will be italic*\\n_This will also be italic_\\n\\n**This text will be bold**\\n__This will also be bold__\\n\\n_You **can** combine them_  \\n[link to Google!](http://google.com)\\n\\n***  \\n### Some lists  \\n* Item 1\\n* Item 2\\n  * Item 2a\\n  * Item 2b\\n\\n1. Item 1\\n1. Item 2\\n1. Item 3\\n   1. Item 3a\\n   1. Item 3b  \\n***  \\n![mountain](https://i.pinimg.com/originals/1b/ea/7e/1bea7ef5f6f3bd85e985642efb264c5f.jpg)  \\n\\n\\nAs Kanye West said:\\n\\n> We're living the future so\\n> the present is our past.\\n\\nI think you should use an\\n`<addr>` element here instead.  \\n***  \\n### Some code  \\n\\n```javascript\\nfunction fancyAlert(arg) {\\n  if(arg) {\\n    $.facebox({div:'#foo'})\\n  }\\n}\\n```  \\n### And tables  \\nFirst Header | Second Header\\n------------ | -------------\\nContent from cell 1 | Content from cell 2\\nContent in the first column | Content in the second column\\n\";\nexport default initialMD;\n\n","import React from \"react\";\nimport { Provider, connect } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport marked from \"marked\";\nimport DOMpurify from \"dompurify\";\nimport initialMD from \"./initialMD\";\nimport \"./app.css\";\n\n// MD to clearn html\n\nconst mdToClearnHtml = (mdText) => {\n  return DOMpurify.sanitize(marked(mdText, { breaks: true }), {\n    FORBID_ATTR: [\"id\"],\n  });\n};\n\n//Redux:\n\nconst INPUT_CHANGED = \"INPUT_CHANGED\";\n\nconst getNewConvertedMd = (mdText) => {\n  return {\n    type: INPUT_CHANGED,\n    mdText,\n    htmlText: mdToClearnHtml(mdText),\n  };\n};\n\nconst initialState = {\n  input: initialMD,\n  output: mdToClearnHtml(initialMD),\n};\n\nconst mainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INPUT_CHANGED:\n      return {\n        input: action.mdText,\n        output: action.htmlText,\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(mainReducer);\n//--------------------------------------------------\n// tests\n//console.log(store.getState());\n//store.dispatch(getNewConvertedMd(\"### test\"));\n//console.log(store.getState());\n\n//--------------------------------------------------\n\n//React:\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.updatePreview(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"inputWrap\">\n        <h2 className=\"inputWrap__header\">Input MarkDown</h2>\n\n        <textarea\n          className=\"inputWrap__input\"\n          name=\"\"\n          id=\"editor\"\n          cols=\"30\"\n          rows=\"10\"\n          placeholder=\"please, type your markdown text here\"\n          value={this.props.mdText}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nconst MarkDownPreview = (props) => {\n  return (\n    <div className=\"outputWrap\">\n      <h2 className=\"outputWrap__header\">Result</h2>\n      <article\n        className=\"outputWrap__view\"\n        id=\"preview\"\n        dangerouslySetInnerHTML={{ __html: props.somehtml }}\n      />\n    </div>\n  );\n};\n\nfunction ConverterMd(props) {\n  return (\n    <div className=\"appWrap\">\n      <Editor mdText={props.input} updatePreview={props.updatePreview} />\n      <MarkDownPreview somehtml={props.output} />\n    </div>\n  );\n}\n\n//React-Redux:\nconst putStateToProps = (state) => {\n  return { input: state.input, output: state.output };\n};\n\nconst putActionsToProps = (dispatch) => {\n  return {\n    updatePreview: (md) => {\n      dispatch(getNewConvertedMd(md));\n    },\n  };\n};\n\nconst Container = connect(putStateToProps, putActionsToProps)(ConverterMd);\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Container />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}