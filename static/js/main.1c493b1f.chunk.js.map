{"version":3,"sources":["initialMD.js","App.js","serviceWorker.js","index.js"],"names":["initialMD","mdToClearnHtml","mdText","DOMpurify","sanitize","marked","breaks","FORBID_ATTR","initialState","input","output","store","createStore","state","arguments","length","undefined","action","type","htmlText","Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","event","updatePreview","target","value","react_default","a","createElement","className","name","id","cols","rows","onChange","React","Component","MarkDownPreview","dangerouslySetInnerHTML","__html","somehtml","Container","connect","dispatch","md","App_Editor","App_MarkDownPreview","App","es","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAEeA,EADb,s+BCSIC,SAAiB,SAAAC,GACrB,OAAOC,IAAUC,SAASC,IAAOH,EAAQ,CAAEI,QAAQ,IAAS,CAC1DC,YAAa,CAAC,UAgBZC,EAAe,CACnBC,MAAOT,EACPU,OAAQT,EAAeD,IAenBW,EAAQC,YAZM,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBN,EAAcS,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOC,MACb,IAjBkB,gBAkBhB,MAAO,CACLT,MAAOQ,EAAOf,OACdQ,OAAQO,EAAOE,UAEnB,QACE,OAAON,KAcPO,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAHHA,4EAMNU,GACXP,KAAKJ,MAAMY,cAAcD,EAAME,OAAOC,wCAItC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBAElBH,EAAAC,EAAAC,cAAA,YACEC,UAAU,mBACVC,KAAK,GACLC,GAAG,SACHC,KAAK,KACLC,KAAK,KACLR,MAAOV,KAAKJ,MAAMnB,OAClB0C,SAAUnB,KAAKI,uBAvBJgB,IAAMC,WA8BrBC,EAAkB,SAAA1B,GACtB,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAClBH,EAAAC,EAAAC,cAAA,WACEC,UAAU,mBACVE,GAAG,UACHO,wBAAyB,CAAEC,OAAQ5B,EAAM6B,cAgBjD,IAYMC,EAAYC,YAZM,SAAAvC,GACtB,MAAO,CAAEJ,MAAOI,EAAMJ,MAAOC,OAAQG,EAAMH,SAGnB,SAAA2C,GACxB,MAAO,CACLpB,cAAe,SAAAqB,GA9FO,IAAApD,EA+FpBmD,EA9FG,CACLnC,KAJkB,gBAKlBhB,OAHsBA,EA+FOoD,EA3F7BnC,SAAUlB,EAAeC,QAgGXkD,CAtBlB,SAAqB/B,GACnB,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACiB,EAAD,CAAQrD,OAAQmB,EAAMZ,MAAOwB,cAAeZ,EAAMY,gBAClDG,EAAAC,EAAAC,cAACkB,EAAD,CAAiBN,SAAU7B,EAAMX,YAiCxB+C,mLARX,OACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAU/C,MAAOA,GACfyB,EAAAC,EAAAC,cAACa,EAAD,cAJUN,IAAMC,WCjHJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1c493b1f.chunk.js","sourcesContent":["var initialMD =\n  \"It's very easy to make some words **bold** and other words *italic* with Markdown. You can even [link to Google!](http://google.com)\\n# big\\n## less\\n###### hehe\\n\\n*This text will be italic*\\n_This will also be italic_\\n\\n**This text will be bold**\\n__This will also be bold__\\n\\n_You **can** combine them_\\n\\n\\n\\n* Item 1\\n* Item 2\\n  * Item 2a\\n  * Item 2b\\n\\n\\n\\n\\n1. Item 1\\n1. Item 2\\n1. Item 3\\n   1. Item 3a\\n   1. Item 3b\\n\\n![GitHub Logo](http://clipart.coolclips.com/480/vectors/tf05250/CoolClips_vc037513.png)\\n\\nhttp://github.com - automatic!\\n[GitHub](http://github.com)\\n\\n\\nAs Kanye West said:\\n\\n> We're living the future so\\n> the present is our past.\\n\\nI think you should use an\\n`<addr>` element here instead.\\n\\n```javascript\\nfunction fancyAlert(arg) {\\n  if(arg) {\\n    $.facebox({div:'#foo'})\\n  }\\n}\\n```\\n\\nFirst Header | Second Header\\n------------ | -------------\\nContent from cell 1 | Content from cell 2\\nContent in the first column | Content in the second column\";\nexport default initialMD;\n","import React from \"react\";\nimport { Provider, connect } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport marked from \"marked\";\nimport DOMpurify from \"dompurify\";\nimport initialMD from \"./initialMD\";\nimport \"./app.css\";\n\n// MD to clearn html\n\nconst mdToClearnHtml = mdText => {\n  return DOMpurify.sanitize(marked(mdText, { breaks: true }), {\n    FORBID_ATTR: [\"id\"]\n  });\n};\n\n//Redux:\n\nconst INPUT_CHANGED = \"INPUT_CHANGED\";\n\nconst getNewConvertedMd = mdText => {\n  return {\n    type: INPUT_CHANGED,\n    mdText,\n    htmlText: mdToClearnHtml(mdText)\n  };\n};\n\nconst initialState = {\n  input: initialMD,\n  output: mdToClearnHtml(initialMD)\n};\n\nconst mainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INPUT_CHANGED:\n      return {\n        input: action.mdText,\n        output: action.htmlText\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(mainReducer);\n//--------------------------------------------------\n// tests\n//console.log(store.getState());\n//store.dispatch(getNewConvertedMd(\"### test\"));\n//console.log(store.getState());\n\n//--------------------------------------------------\n\n//React:\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.updatePreview(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"inputWrap\">\n        <header className=\"inputWrap__header\" />\n\n        <textarea\n          className=\"inputWrap__input\"\n          name=\"\"\n          id=\"editor\"\n          cols=\"30\"\n          rows=\"10\"\n          value={this.props.mdText}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nconst MarkDownPreview = props => {\n  return (\n    <div className=\"outputWrap\">\n      <header className=\"outputWrap__header\" />\n      <article\n        className=\"outputWrap__view\"\n        id=\"preview\"\n        dangerouslySetInnerHTML={{ __html: props.somehtml }}\n      />\n    </div>\n  );\n};\n\nfunction ConverterMd(props) {\n  return (\n    <div className=\"appWrap\">\n      <Editor mdText={props.input} updatePreview={props.updatePreview} />\n      <MarkDownPreview somehtml={props.output} />\n    </div>\n  );\n}\n\n//React-Redux:\nconst putStateToProps = state => {\n  return { input: state.input, output: state.output };\n};\n\nconst putActionsToProps = dispatch => {\n  return {\n    updatePreview: md => {\n      dispatch(getNewConvertedMd(md));\n    }\n  };\n};\n\nconst Container = connect(\n  putStateToProps,\n  putActionsToProps\n)(ConverterMd);\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Container />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}